GoogleTransitDataFeed transxchange2GoogleTransit

Copyright 2007, 2008, 2009, 2010, 2011, 2012 GoogleTransitDataFeed

This product includes software developed by:
The Apache Software Foundation (http://www.apache.org/)



RELEASE NOTES

--------------------------------------------------------------
v1.7.5:

*** Bugfix for stops.txt: Easting and Northing of route links interfered with correctly carrying over lat/lon data from the NapTAN stops.csv file. 
*** Bugfix for trips.txt: CSV-proof output of trip headsign
*** routes.txt: Align output of route_desc with GTFS feed validator requirement that route description shall not be same as route short or long name

--------------------------------------------------------------
v1.7.4:

*** Improve robustness of stop file read

*** Bugfix dereferencing service IDs for calendar_dates.txt file

--------------------------------------------------------------
v1.7.3:

*** Carry <Direction> of JourneyPatterns through to direction_in in trips.txt. Mapping
0 - "outbound"
1 - "inbound"

*** Use <Route> <Description> to populate trip_headsign in trips.txt


--------------------------------------------------------------
v1.7.2:

*** Bugfix to handle DaysOfOperation:AllBankHolidays correctly
This addresses issue #288 in http://code.google.com/p/googletransitdatafeed/issues/detail?id=288

*** Added configuration file settings in support of optional columns of agency.txt file
lang=<value>
phone=<value>

--------------------------------------------------------------
v1.7.1:

*** Bugfix for duplicate entries in calendar_dates.txt
This addresses in part issue #284 in http://code.google.com/p/googletransitdatafeed/issues/detail?id=284

--------------------------------------------------------------
v1.7.0:

*** Skip empty services (new configuration file setting)
Services sometimes do not combine to a valid day pattern, and lead to the following types of records in calendar.txt:
<service_id>,0,0,0,0,0,0,0,<start_date>,<end_date>
Services which do not contain a valid day pattern can be skipped by specifying:
skipemptyservice=true
in the configuration file. 
As a side effect, specific non-service days (<DaysOfNonOperation>) are also skipped in calendar_dates.txt, while records for specific active 
<DaysOfOperation> continue to be included in calendar_dates.txt
This option is not available as a command line option, i.e. requires the use of a configuration file. 
This setting addresses issue #253 in http://code.google.com/p/googletransitdatafeed/issues/detail?id=253
Default value=false

*** Skip orphan stops (new configuration file setting)
TransXChange feeds sometimes contain stops which are not referenced in any of the services. 
Stops which are not referenced by a service ("orphan stops") can be skipped by specifying:
skiporhpanstops=true
This option is not available as a command line option, i.e. requires the use of a configuration file.
Default value=false

*** Geocode stop coordinates where missing (new configuration file setting)
The GTFS specification requires WGS-84 coordinates for each stop in stops.txt. 
Some coordinates for stops of a TransXChange input, possibly in concert with a NapTAN stop file, may not be available however.
With this option active, the converter makes an attempt to geocode the stop's coordinates, using Google's Maps API. (http://code.google.com/apis/maps/documentation/geocoding/)
The converter logs geocoding attempts in the console.
Note: Geocoded coordinates are expected to have insufficient accuracy for most uses. This feature allows to reach formal compliance to validate against the GTFS specification.
geocodemissingstops=true
This option is not available as a command line option, i.e. requires the use of a configuration file.
Default value=false

*** <Mode> override of default route type (new configuration file setting)
Services of a TransXChange feed that include <Mode> tags are mapped to a mode as defined in the configuration file.
Syntax: mode:<<Mode> tag value>=<GTFS mode value>
Example:
mode:rail=2
mode:bus=3
mode:ferry=4
With this mapping, occurrences of a Service <Mode> "bus" in the TransXChange feed will be set to value "3" in column "route_type" of the routes.txt file.
This option is not available as a command line option, i.e. requires the use of a configuration file.
This setting addresses issue #254 in http://code.google.com/p/googletransitdatafeed/issues/detail?id=254

*** NaPTAN stop name helper flag (new configuration file setting)
Without the NaPTAN stop name helper activated, the converter combines the values of <CommonName> and <LocalityName> to stop_name values.
The NapTAN stop name helper implements the "usable stop name rules v4 for NaPTAN and NPTG databases". It unrolls the following stop_name format from a NaPTAN v1 csv stop file:
<LocalityName>,<Indicator><CommonName>(on <street>)[SMS: <NaptanCode>]
naptanstophelper=true
This option is not available as a command line option, i.e. requires the use of a configuration file.
Default value=false

*** NaPTAN stop column pick (new configuration file setting)
When a NaPTAN stop column pick is defined, the converter picks the value of the respective column (attribute) from a NaPTAN v1 csv stop file. 
A NaPTAN stop column pick definition in a configuration file overrides the NaPTAN stop name helper if activated.
The columns are picked in the sequence they occur in the configuration file.
Example:
naptanstopcolumn="CommonName"
naptanstopcolumn="NatGazLocality"
naptanstopcolumn="ATCOCode"
results in a stop_name that is a combination of the stops' CommonName, NatGazLocality and ATCOCode. 
Note that the respective values identify the columns in a NaPTAN  v1 csv stop file.
In the stops.txt file, the values of the picked columns are separated by a comma (,), or by the definition of the NaPTAN stop column separator.

*** NaPTAN stop column separator (new configuration file setting)
The stop column separator works in conjunction with the NaPTAN stop name helper and NaPTAN stop column pick definitions. 
The value defined is used in place of the default comma (,).
Example:
stopfilecolumnseparator=;-
This option is not available as a command line option, i.e. requires the use of a configuration file.

*** Agency mapping (new configuration file setting)
This setting maps the agency_id as captured from the operator registration into an agency_name. 
Use '=' to separate key ("agency"), agency_id and the mapped agency name. 
Multiple agency mappings can be defined, using separate rows.
Example:
agency:OId_LU=London Buses, operated by London United
agency:OId_48=London Buses, operated by London General
The resulting output in agency.txt uses OId_LU as agency_id, and "London Buses, operated by London United" as agency_name, and so forth.
Without this setting, agency_name's are populated with the values of the <OperatorNameOnLicence> tag.

*** Additional command line argument combinations
$ transxchange2GoogleTransit <transxchange input filename> <output-directory> -c <configuration file name>
$ transxchange2GoogleTransit <transxchange input filename> <output-directory> <agency name> -c <configuration file name>
Note:
	<output-directory> overrides the corresponding configuration file setting 
	<agency name> overrides configuration file agency mappings 

*** Bugfix processing zip files
This release fixes issue #272 http://code.google.com/p/googletransitdatafeed/issues/detail?id=272

*** Backward compatibility to Java 1.5 re-introduced

--------------------------------------------------------------
v1.6.6:

*** The converter is now called Transxchange2GTFS

*** Bug fix in calender_dates.txt
In isolated cases, the start and end dates of a service were not converted correctly. Corrected to reflect values of <StartDate> and <EndDate>. 

*** Memory optimizations


--------------------------------------------------------------
v1.6.5:

*** Refined parsing of <RunTime> element
Previously, runtimes were allowed only for a single unit, i.e. either minutes or seconds
Now, runtimes can be mixed, e.g. hours and minutes combined


--------------------------------------------------------------
v1.6.4:

*** New: Configuration file
As an option, a configuration file can be used in place of the multiple command line arguments. Usage: 
	$ transxchange2GoogleTransit <transxchange input filename> -c <configuration file name>
The original approach of multiple command line arguments remains unchanged. 
Mixing the new configuration file and the multiple command line arguments is not possible.

Each entry (line) in the configuration file must follow the following syntax:
	<argument>=<value>
The following arguments are supported:
	url=<Agency URL>
	timezone=<List of timezones: http://en.wikipedia.org/wiki/List_of_tz_zones>
	default-route-type=<0 - Tram, 1 - Subway, 2 - Rail, 3 - Bus, 4 - Ferry, 5 - Cable car, 6 - Gondola, 7 - Funicular>
	output-directory=<outout path>
	stopfile=<file name of optional stopfile name in NaPTAN CSV format>
	useagencyshortname=<true|false> (Default: false)
Sample configuration file:
url=http://www.aagency.org
timezone=Syndey/Australia
default-route-type=3
output-directory=output
useagencyshortname=true

*** New: Agency short name flag 
As part of the introduction of the configuration file, a switch has been introduced that steers the converter to populates the GTFS 
agency name with the TransXChange <OperatorShortName>.

*** New: Inline coordinates
TransXChange files rely on coordinate lookups from the UK NaPTAN database. 
v1.6.4 supports inline coordinates (lat, lon) of <StopPoint>s that include <latitude> and <longitude> data 

*** Bugfix: Correct conversion of <DaysOfOperation> to calender_dates.txt exception_type: 1 in individual <VehicleJourney>s
In previous versions of transxchange2GoogleTransit, <DaysOfOperation> of a <VehicleJourney> were converted 
to exception_type 2. The correct exception_type is 1, which is now written to calender_dates.txt. <DaysOfNoOperation> continue to be 
written as exception_type 2.
Discussion: 
1.The primary vehicle to define <OperatingProfile>s is <Service>, which was not affected by this bug. 
In practice, a fraction of <VehicleJourney>s include individual calendar days for service inclusion or exclusion. 
2. This bug has not been reported. It was identified when validating a GTFS feed that was created whith 
transxchange2GoogleTransit 1.6.3. The GTFS feed validator issued warnings for some <Service>s in converted published datasets (Sydney) 
that flagged services without any active calendar dates. 


--------------------------------------------------------------
v1.6.3:

*** Read NaPTAN format CSV stop file as specified in Command Line (CLI)
A CLI argument has been added to allow user to specify a NaPTAN format CSV stop file. 
	Note: 	An error in the NaPTAN format offsets the column headlines by one. 
			This is accounted for, but the NaPTAN format may need correction.

*** Java heap size increased
The tXCh2GT batch files (.bat and .sh) have been updated to increase the heap size to 512MB 
to accommodate the added memory needed to hold the regular UK NaPTAN stop records.

*** Bank holidays revised
Dynamic creation of (transit) bank holidays England and Wales for the years a service operates.
	GoodFriday - the Friday before Easter Sunday.
	EasterMonday - the Monday after Easter Sunday.
	MayDay - the first Monday in May.
	SpringBank - the last Monday in May.
	LateSummerHolidayNotScotland - the last Monday in August.
	ChristmasDay - 25th Dec.
	BoxingDay - 26th Dec.
	NewYearsDay - 1st Jan.

*** Expose parse exceptions
Send trace dump to console in case GTDF crashes when input files are parsed.

*** GWT_Transxchange2GoogleTransit dropped
Not included in releases any longer.

--------------------------------------------------------------
